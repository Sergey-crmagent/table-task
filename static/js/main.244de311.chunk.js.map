{"version":3,"sources":["Form/Form.js","Table/Table.js","DetailRowView/DetailRowView.js","ModeSelector/ModeSelector.js","TableSearch/TableSearch.js","Preloader/Preloader.js","App.js","index.js"],"names":["max","min","Table","props","className","style","cursor","onClick","onSort","bind","sortField","sort","data","map","item","onRowSelect","id","firstName","lastName","email","phone","person","defaultValue","description","address","streetAddress","city","state","zip","ModeSelector","display","justifyContent","padding","onSelect","useState","value","setValue","onSearch","type","onChange","event","target","Preloader","letter","test","undefined","required","maxLength15","length","number","isNaN","Number","minValue18","tooMuch","aol","phoneMask","createTextMask","pattern","renderField","input","label","meta","touched","error","warning","placeholder","reduxForm","form","handleSubmit","pristine","reset","submitting","onSubmit","Field","name","component","validate","warn","disabled","App","isModeSelected","isLoading","search","row","currentPage","isButtonShowed","isFormShowed","cloneData","concat","_","orderBy","setState","modeSelectHandler","url","fetchData","pageChangeHandler","selected","searchHandler","showTheForm","getFilteredData","result","filter","toLowerCase","includes","a","fetch","response","json","this","filteredData","pageCount","Math","ceil","displayData","chunk","Fragment","TableSearch","Form","submit","newData","previousLabel","nextLabel","breakLabel","breakClassName","marginPagesDisplayed","pageRangeDisplayed","onPageChange","containerClassName","activeClassName","pageClassName","pageLinkClassName","previousClassName","nextClassName","previousLinkClassName","nextLinkClassName","forcePage","DetailRowView","Component","reducers","formReducer","reducer","combineReducers","store","createStore","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.244de311.chunk.js","sourcesContent":["import React from 'react';\r\nimport {Field, reduxForm} from 'redux-form';\r\nimport { createTextMask } from 'redux-form-input-masks';\r\n\r\n\r\n\r\nconst letter = value => value && /^.*[^A-zА-яЁё].*$/i.test(value) ? 'Only letters' : undefined;\r\n\r\nconst required = value => value ? undefined : 'Required'\r\n\r\nconst maxLength = max => value =>\r\n    value && value.length > max ? `Must be ${max} characters or less` : undefined\r\n\r\nconst maxLength15 = maxLength(15)\r\n\r\nconst number = value => value && isNaN(Number(value)) ? 'Must be a number' : undefined\r\n\r\nconst minValue = min => value =>\r\n    value && value < min ? `Must be at least ${min}` : undefined\r\nconst minValue18 = minValue(1)\r\n\r\nconst email = value =>\r\n    value && !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(value) ?\r\n        'Invalid email address' : undefined\r\n\r\nconst tooMuch = value =>\r\n    value && value > 1000000 ? 'Too much' : undefined\r\n\r\nconst aol = value =>\r\n    value && /.+@aol\\.com/.test(value) ?\r\n        'Really? You still use AOL for your email?' : undefined\r\n\r\nconst phoneMask = createTextMask({\r\n    pattern: '+7 (999) 999-9999',\r\n});\r\n\r\nconst renderField = ({ input, label, type, meta: { touched, error, warning } }) => (\r\n    <div>\r\n        <label>{label}</label>\r\n        <div>\r\n            <input {...input} placeholder={label} type={type}/>\r\n            {touched && ((error && <span>{error}</span>) || (warning && <span>{warning}</span>))}\r\n        </div>\r\n    </div>\r\n)\r\n\r\nconst FieldLevelValidationForm = (props) => {\r\n    const { handleSubmit, pristine, reset, submitting } = props\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <Field name=\"id\" type=\"number\"\r\n                   component={renderField} label=\"id\"\r\n                   validate={[ required, number, minValue18 ]}\r\n                   warn={tooMuch}\r\n            />\r\n            <Field name=\"firstName\" type=\"text\"\r\n                   component={renderField} label=\"firstName\"\r\n                   validate={[ required, maxLength15 ]}\r\n                   warn={letter}\r\n            />\r\n            <Field name=\"lastName\" type=\"text\"\r\n                   component={renderField} label=\"lastName\"\r\n                   validate={[ required, maxLength15 ]}\r\n                   warn={letter}\r\n            />\r\n            <Field name=\"email\" type=\"email\"\r\n                   component={renderField} label=\"Email\"\r\n                   validate={[ required, email ]}\r\n                   warn={aol}\r\n            />\r\n            <Field name=\"phone\" type=\"tel\"\r\n                   component={renderField} label=\"phone\"\r\n                   validate={[ required ]}\r\n                   {...phoneMask}\r\n            />\r\n            <div>\r\n                <button type=\"submit\" disabled={submitting}>Submit</button>\r\n                <button type=\"button\" disabled={pristine || submitting} onClick={reset}>Clear Values</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default reduxForm({\r\n    form: 'fieldLevelValidation' // a unique identifier for this form\r\n})(FieldLevelValidationForm)","import React from 'react';\r\n\r\nconst Table = (props) => (\r\n    <table className=\"table\" style={{ cursor: \"pointer\" }}>\r\n        <thead>\r\n        <tr>\r\n            <th onClick={props.onSort.bind(null, \"id\")}>\r\n                ID {props.sortField === \"id\" ? <small>{props.sort}</small> : null}\r\n            </th>\r\n            <th onClick={props.onSort.bind(null, \"firstName\")}>\r\n                First Name{\" \"}\r\n                {props.sortField === \"firstName\" ? <small>{props.sort}</small> : null}\r\n            </th>\r\n            <th onClick={props.onSort.bind(null, \"lastName\")}>\r\n                Last Name{\" \"}\r\n                {props.sortField === \"lastName\" ? <small>{props.sort}</small> : null}\r\n            </th>\r\n            <th onClick={props.onSort.bind(null, \"email\")}>\r\n                E-mail{\" \"}\r\n                {props.sortField === \"email\" ? <small>{props.sort}</small> : null}\r\n            </th>\r\n            <th onClick={props.onSort.bind(null, \"phone\")}>\r\n                Phone{\" \"}\r\n                {props.sortField === \"phone\" ? <small>{props.sort}</small> : null}\r\n            </th>\r\n        </tr>\r\n        </thead>\r\n        <tbody>\r\n        {props.data.map(item => (\r\n            <tr\r\n                key={item.id + item.phone}\r\n                onClick={props.onRowSelect.bind(null, item)}\r\n            >\r\n                <td>{item.id}</td>\r\n                <td>{item.firstName}</td>\r\n                <td>{item.lastName}</td>\r\n                <td>{item.email}</td>\r\n                <td>{item.phone}</td>\r\n            </tr>\r\n        ))}\r\n        </tbody>\r\n    </table>\r\n);\r\n\r\nexport default Table;","import React from 'react';\r\n\r\nexport default ({person}) => (\r\n    <div>\r\n        <p>Выбран пользователь <b>{person.firstName + ' ' + person.lastName}</b></p>\r\n        <p>\r\n            Описание: <br />\r\n            <textarea defaultValue={person.description} />\r\n        </p>\r\n\r\n        <p>Адрес проживания: <b>{person.address.streetAddress}</b></p>\r\n        <p>Город: <b>{person.address.city}</b></p>\r\n        <p>Провинция/штат: <b>{person.address.state}</b></p>\r\n        <p>Индекс: <b>{person.address.zip}</b></p>\r\n\r\n    </div>\r\n)","import React from 'react';\r\n\r\nconst ModeSelector = (props) => {\r\n    const smallUrl = `http://www.filltext.com/?rows=32&id={number|1000}&firstName={firstName}&lastName={lastName}&email={email}&phone={phone|(xxx)xxx-xx-xx}&address={addressObject}&description={lorem|32}`;\r\n    const bigUrl = `http://www.filltext.com/?rows=1000&id={number|1000}&firstName={firstName}&delay=3&lastName={lastName}&email={email}&phone={phone|(xxx)xxx-xx-xx}&address={addressObject}&description={lorem|32}`;\r\n    return (\r\n        <div style={{display:'flex', justifyContent:'center', padding: '50px 0'}}>\r\n            <button onClick={()=>props.onSelect(smallUrl)} className=\"btn btn-outline-dark\">32 элемента</button>\r\n            <button onClick={()=>props.onSelect(bigUrl)} className=\"btn btn-outline-dark\">1000 элементов</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ModeSelector;","import React, {useState} from 'react'\r\n\r\nexport default props => {\r\n    const [value, setValue] = useState('')\r\n    const valueChangeHandler = event => {\r\n        setValue(event.target.value)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className=\"input-group mb-3 mt-3\">\r\n                <div className=\"input-group-prepend\">\r\n                    <button\r\n                        className=\"btn btn-outline-secondary\"\r\n                        onClick={() => props.onSearch(value)}\r\n                    >\r\n                        Search\r\n                    </button>\r\n                </div>\r\n                <input\r\n                    type=\"text\"\r\n                    className=\"form-control\"\r\n                    onChange={valueChangeHandler}\r\n                    value={value}\r\n                />\r\n            </div>\r\n        </>\r\n    );\r\n}","import React from 'react';\r\nimport './Preloader.css';\r\n\r\nconst Preloader = () => {\r\n    return(\r\n        <div className=\"lds-spinner\">\r\n            <div></div>\r\n            <div></div>\r\n            <div></div>\r\n            <div></div>\r\n            <div></div>\r\n            <div></div>\r\n            <div></div>\r\n            <div></div>\r\n            <div></div>\r\n            <div></div>\r\n            <div></div>\r\n            <div></div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Preloader;","import React, { Component } from 'react';\nimport ReactPaginate from 'react-paginate';\nimport Table from './Table/Table';\nimport DetailRowView from './DetailRowView/DetailRowView';\nimport ModeSelector from './ModeSelector/ModeSelector';\nimport TableSearch from './TableSearch/TableSearch';\nimport _ from 'lodash';\nimport Preloader from \"./Preloader/Preloader\";\nimport Form from \"./Form/Form\";\n\n\nclass App extends Component {\n    state = {\n        isModeSelected: false,\n        isLoading: false,\n        data: [],\n        search: '',\n        sort: 'asc',  // 'desc'\n        sortField: 'id',\n        row: null,\n        currentPage: 0,\n        isButtonShowed: true,\n        isFormShowed: false,\n    }\n\n    async fetchData(url) {\n        const response = await fetch(url)\n        const data = await response.json()\n\n        this.setState({\n            isLoading: false,\n            data: _.orderBy(data, this.state.sortField, this.state.sort)\n        })\n    }\n\n    onSort = sortField => {\n        const cloneData = this.state.data.concat();\n        const sort = this.state.sort === 'asc' ? 'desc' : 'asc';\n        const data = _.orderBy(cloneData, sortField, sort);\n        this.setState({ data, sort, sortField })\n    }\n\n    modeSelectHandler = url => {\n        this.setState({\n            isModeSelected: true,\n            isLoading: true,\n        })\n        this.fetchData(url)\n    }\n\n\n    onRowSelect = row => (\n        this.setState({row})\n    )\n\n    pageChangeHandler = ({selected}) => (\n        this.setState({currentPage: selected})\n    )\n\n    searchHandler = search => {\n        this.setState({search, currentPage: 0})\n    }\n\n\n    showTheForm = () => {\n        this.setState({\n            isFormShowed: true,\n            isButtonShowed: false,\n        })\n    }\n\n\n\n    getFilteredData = () => {\n        const {data, search} = this.state\n\n        if (!search) {\n            return data\n        }\n        let result = data.filter(item => {\n            return (\n                item[\"firstName\"].toLowerCase().includes(search.toLowerCase()) ||\n                item[\"lastName\"].toLowerCase().includes(search.toLowerCase()) ||\n                item[\"email\"].toLowerCase().includes(search.toLowerCase())\n            );\n        });\n        if(!result.length){\n            result = this.state.data\n        }\n        return result\n    }\n\n\n    render() {\n        const pageSize = 50;\n        if(!this.state.isModeSelected){\n            return (\n                <div className=\"container\">\n                    <ModeSelector onSelect={this.modeSelectHandler}/>\n                </div>\n            )\n        }\n\n        const filteredData = this.getFilteredData();\n        const pageCount = Math.ceil(filteredData.length / pageSize)\n        const displayData = _.chunk(filteredData, pageSize)[this.state.currentPage]\n        return (\n            <div className=\"container\">\n                {\n                    this.state.isLoading\n                        ? <Preloader />\n                        : <React.Fragment>\n                            <TableSearch onSearch={this.searchHandler}/>\n\n                            <button onClick={this.showTheForm}>Add row</button>\n                            {this.state.isFormShowed ? <Form onSubmit={this.submit}/> : null}\n\n                            <Table\n                                newData={this.state.data}\n                                data={displayData}\n                                onSort={this.onSort}\n                                sort={this.state.sort}\n                                sortField={this.state.sortField}\n                                onRowSelect={this.onRowSelect}\n                            />\n                        </React.Fragment>\n                }\n\n                {\n                    this.state.data.length > pageSize\n                        ? <ReactPaginate\n                            previousLabel={'<'}\n                            nextLabel={'>'}\n                            breakLabel={'...'}\n                            breakClassName={'break-me'}\n                            pageCount={pageCount}\n                            marginPagesDisplayed={2}\n                            pageRangeDisplayed={5}\n                            onPageChange={this.pageChangeHandler}\n                            containerClassName={'pagination'}\n                            activeClassName={'active'}\n                            pageClassName=\"page-item\"\n                            pageLinkClassName=\"page-link\"\n                            previousClassName=\"page-item\"\n                            nextClassName=\"page-item\"\n                            previousLinkClassName=\"page-link\"\n                            nextLinkClassName=\"page-link\"\n                            forcePage={this.state.currentPage}\n                        /> : null\n                }\n\n                {\n                    this.state.row ? <DetailRowView person={this.state.row} /> : null\n                }\n            </div>\n        );\n    }\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport {Provider} from 'react-redux';\nimport {createStore, combineReducers} from 'redux';\nimport {reducer as formReducer} from 'redux-form';\n\nconst reducers = {form: formReducer};\nconst reducer = combineReducers(reducers);\nlet store = createStore(reducer);\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById('root')\n)\n\n\n"],"sourceRoot":""}